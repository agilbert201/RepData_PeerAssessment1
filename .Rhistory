apply(split(iris, sp), mean)
lapply(split(iris, sp), mean)
lapply(split(iris, sp), fun(x) mean(x$Sepal.Length))
lapply(split(iris, sp), mean(na.rm=TRUE))
lapply(split(iris, sp), mean(x, na.rm=TRUE))
?lapply
f1 < function(x) mean(x$Sepal.Length)
f1 <- function(x) mean(x$Sepal.Length)
lapply(split(iris, sp), f1)
colMeans(iris)
rowMeans(iris)
rowMeans(iris[,1:4])
apply(iris[,1:4],2,mean)
data(mtcars)
history
mtcars
?tapply
?with
tapply(mpg, cyl, mean)
with(tapply(mpg, cyl, mean))
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
209.21429 - 82.63636
debug(ls)
ls
ls()
str(str)
str(lm)
str(ls)
x <- rnorm(100,2 4)
x <- rnorm(100,2, 4)
str(x)
summary(x)
f <- gl(40, 10)
summary(f)
str(f)
library(datasets)
head(airquality)
str(airquality)
m <- matrix(rnorm(100, 2, 4))
s <- split(airquality, airquality$Month)
str(s)
x <- rnorm(100, 20, 2)
min(x)
max(x)
summary(x)
pnorm(100, 20, 2)
dnorm(100, 20, 2)
qnorm(100, 20, 2)
str(rnorm)
set.seed(1)
rnorm(10)
rnorm(10)
set.seed(1)
rnorm(10)
str(ppois)
str(pnorm)
rnorm(10)
pnorm(.5)
pnorm(.9)
pnorm(1)
pnorm(0)
pnorm(3, 20, 2)
pnorm(20, 20, 2)
pnorm(21, 20, 2)
pnorm(22, 20, 2)
pnorm(23, 20, 2)
pnorm(24, 20, 2)
pnorm(18, 20, 2)
set.seed(20)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
str(y)
plot(x, y)
x <- binom(100, 1, 0.5)
x <- rbinom(100, 1, 0.5)
str(rbinom)
y <- 0.5 + 2 * x + e
plot(x, y)
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5  + 0.3 * x
y <- rpois(100, exp(log.mu))
summary(y)
str(y)
plot(x,y)
sample(1:10, 5)
sample(1:10, 5)
set.seed(1)
sample(1:10, 4)
sample(1:10, 4)
set.seed(1)
sample(1:10, 4)
sample(1:10)
sample(1:10, replace=TRUE)
?read.csv
df = data.frame(x=rnorm(9), y=rep(c("a", "b", "c"), each=3),z=rnorm(9))
head(df)
dt = data.table(x=rnorm(9), y=rep(c("a", "b", "c"), each=3),z=rnorm(9))
library(data.table)
install.packages("data.table")
dt = data.table(x=rnorm(9), y=rep(c("a", "b", "c"), each=3),z=rnorm(9))
library(data.table)
dt = data.table(x=rnorm(9), y=rep(c("a", "b", "c"), each=3),z=rnorm(9))
head(dt)
tables()
?data.table
dt[,2]
dt[2,]
dt
dt[dt$y="a"]
dt[dt$y=="a"]
dt[2]
dt[c(2,3)]
dt[,list(mean(x))]
dt[,list(mean(x), sum(z))]
dt[,list(x)]
dt
dt[,x]
dt[,table(y)]
dt[,w:=x^2]
dt
dt[,m:={tmp <- x+y; log2(tmp+5)}]
dt[,m:={tmp <- x+z; log2(tmp+5)}]
dt
set.seed(123)
dt <- data.table(x=sample(letters[1:3], 1E5, TRUE))
dt[, .N, by=x]
file?
/
?file
data.table
?read.csv
read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", method="curl)
""
)
"
read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", method="curl")
?fread()
?file
file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
f <- file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
read.csv(f)
library(curl)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", method="curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile="/tmp/data.csv", method="curl")
library(RCurl)
d <- getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
?read.csv
df <- read.csv(d)
df <- read.csv(text = d)
df[,df$VAL]
df[,$VAL]
library(data.table)
?data.table
dt <- fread(d)
dt[,]
dt[,dt$VAL]
dt[,VAL>=24]
dt[,VAL=24]
dt[,VAL]
dt[,VAL=24]
dt[,count(VAL=24)]
dt[,list(v), by=VAL]
dt[,list(VAL)]
dt[,list(VAL), VAL=24]
dt[,list(VAL=24]
dt[,list(VAL=24)]
df[df$VAL,]
df[,2]
df[,df$VAL]
dt[df$VAL]
dt[1,]
dt[,3]
dt[,VAL==24]
dt[,VAL==24,with=TRUE]
dt[,list(VAL),VAL==24]
dt[,list(VAL)]
dt[,list(VAL),VAL==24]
dt[,.N,VAL==24]
u <- getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
library(xlsx)
install.packages("xlsx")
library("xlsx")
?read.xlsx
read.xlsx(u)
read.xlsx(u,1)
u <- getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="/tmp/ngap.xlsx", method="curl")
x <- read.xlsx("/tmp/ngap.xlsx", 1)
x <- read.xlsx("/tmp/ngap.xlsx", 1, startRow=18, endRow=23, colIndex=7:15)
dat <- read.xlsx("/tmp/ngap.xlsx", 1, startRow=18, endRow=23, colIndex=7:15)
sum(dat$Zip*dat$Ext,na.rm=T)
?read.xml
?xmlInternalParse
?xmlInternalTreeParse
?xml
library(xml)
install.packages("XML")
library(xml)
library("xml")
library(XML)
?xmlInternalTreeParse
x <- xmlInternalTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", method="curl", destfile="/tmp/restaurants.xml")
x <- xmlInternalParse("/tmp/restaurants.xml")
x <- xmlInternalTreeParse("/tmp/restaurants.xml")
xpath.Apply(x, "zipcode")
xpathApply(x, "zipcode")
xpathApply(x, "//zipcode")
?xpathApply
xpathApply(x, "//zipcode", xmlValue)
xpathApply(x, "//zipcode", xmlValue == "21231")
xpathApply(x, "//zipcode == "21231"", xmlValue)
xpathApply(x, "//zipcode[xmlValue == 21231], xmlValue)
xpathApply(x, "//zipcode[xmlValue == 21231]", xmlValue)
xpathApply(x, "//zipcode[node == 21231]", xmlValue)
xpathApply(x, "//zipcode[.=21231]", xmlValue)
?system.time
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", method="curl", destfile="/tmp/pid.csv")
DT <- fread("/tmp/pid.csv")
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time({mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)})
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
DT[,mean(pwgtp15),by=SEX]
{mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)}
mean(DT[DT$SEX==1,]$pwgtp15);
sapply(split(DT$pwgtp15,DT$SEX),mean)
mean(DT$pwgtp15,by=DT$SEX)
system.time(mean(DT$pwgtp15,by=DT$SEX))
tapply(DT$pwgtp15,DT$SEX,mean)
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
{rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]}
rowMeans(DT)[DT$SEX==1]
?connections
set.seed(1345)
set.seed(13435)
X <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
X
X[sample(1:5),]
?sample
sample(1:5)
sample(1:5)
X[sample(1:5),]
X$var2
X$var2[c(1,3)]
X[,1]
X
X[,$var1]
X[,X$var1]
X[,X$var2]
X[,"var2"]
X[X$var1 = 1]
X[(X$var1 = 1)]
X[(X$var1 == 1)]
X[(X$var1 eq 1)]
X[(X$var1 > 1)]
X[(X$var1 > 1),]
X[(X$var1 = 1),]
?dplyr
library(dpylr)
library(dplyr)
?dpylr
?packages::dplyr
str(dplyr)
?
d
??dplyr
vignette(package="dplry")
vignette(package="dplyr")
vignette(package="dplyr", topic="introduction")
install.packages()
installed.packages()
packageDescription(dplyr)
packageDescription("dplyr")
ls(package:dplyr)
search()
ls(package:base)
library(stringr)
ls("package:stringr")
?str_dup
?library
?table
?str_trim
??factor
(ff <- factor(substring("statistics", 1:10, 1:10), levels = letters))
as.integer(ff)
(f. <- factor(ff))
f
f.
factor(letters[1:20], labels = "letter")
Month <- airquality$Month
str(Month)
ls(Month)
class(Month)
table(Month)
Month[0]
Month
dir(Month)
factor(airquality$Month)
fm <- factor(airquality$Month)
class(fm)
fm[0]
labels(fm)
levels(fm)
labels(fm) <- c("May", "June", "July", "August", "September")
fm.labels <- c("May", "June", "July", "August", "September")
fm <- factor(fm, labels=fm.labels)
fm
table(fm)
?quotemeta
library(string)
library(stringr)
?quotemeta
ls("package:stringr")
?perl
??quote
??regexpr
?as.Date
library(lubridate)
install.package("lubridate")
installPackage("lubridate")
??install
install.packages("lubridate")
library("lubridate")
ls("package.lubridate")
ls("lubridate")
ls("package:lubridate")
?wday
wday(1)
wday(3)
wday(3, label = TRUE)
?POSIXlt
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url, "/tmp/acs.csv", method=curl)
download.file(url, "/tmp/acs.csv", method="curl")
df <- read_csv("/tmp/acs.csv")
df <- read.csv("/tmp/acs.csv")
names(df)
strsplit(names(df), "wgtp")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(url, "/tmp/gdp.csv", method="curl")
df <- read.csv("/tmp/gdp.csv")
df
?read.csv
df <- read.csv("/tmp/gdp.csv", skip=5)
df <- read.csv("/tmp/gdp.csv", skip=5, header=false)
df <- read.csv("/tmp/gdp.csv", skip=5, header=FALSE)
df <- read.csv("/tmp/gdp.csv", skip=5, nrows=231, header=FALSE)
df
head(df)
df$V5
gsub(",", "", df$V5)
noc <- gsub(",", "", df$V5)
strtoi(noc)
ls(packages)
ls(package:)
ls("package:")
library(stringr)
stringr::
stringr::str_trim
str_trim(noc)
noc <- str_trim(noc)
strtoi(noc)
mean(noc)
gdp <- strtoi(noc)
mean(gdp)
mean(gdp,na.rm = TRUE)
df$V5
df$V1
df$V1[,190]
df$V1[1:190,]
df$V1[1:190]
df$V5[1:190]
noc <- df$V5[1:190]
noc <- gsub(",", "", noc)
noc <- str_trim(noc)
gdp <- strtoi(noc)
gpp
gdp
mean(gdp)
df$V4
df$V4[1:190]
countryNames <- df$V4[1:190]
countryNames
grep("^United", countryNames)
?grep
enc2native(countryNames)
grep("^United", countryNames, useBytes = TRUE)
gdp <- read.csv("/tmp/gdp.csv", skip=5, nrows=190, headers=FALSE)
gdp <- read.csv("/tmp/gdp.csv", skip=5, nrows=190, header=FALSE)
head(gdp)
tail(gdp)
ed_url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(ed_url, "/tmp/ed.csv")
download.file(ed_url, "/tmp/ed.csv", method="curl")
ed <- read.csv("/tmp/ed.csv")
merge(gdp, ed, by.x="V1", by.y="CountryCode")
j <- merge(gdp, ed, by.x="V1", by.y="CountryCode")
j$special.notes
j
j$Special.Notes
grep("Fiscal", j$Special.Notes)
?grep
grep("Fiscal", j$Special.Notes, value = TRUE)
fy <- grep("Fiscal", j$Special.Notes, value = TRUE)
grep("June", fy)
length(grep("June", fy))
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes=index(amzn)
sampleTimes
library(lubridate)
ymd("2015-01-29")
d <- ymd("2015-01-29")
d
class(d)
year(d)
day(d)
dayofweek(d)
times <- ymd(sampleTimes)
times
year(times)
times[year(times) == 2012]
?lubridate
weekdays.POSIXt("2012-12-26 UTC")
weekdays.POSIXt(times)
samples2012 <- times[year(times) == 2012]
weekdays.POSIXt(samples2012)
samples2012[weekdays.POSIXt(samples2012) == "Monday"]
res <- read_csv("/Volumes/C/Users/agilbert/Documents/GitHub/CabotCRM/doc/CONTACTSLIST.csv")
res <- read_csv2("/Volumes/C/Users/agilbert/Documents/GitHub/CabotCRM/doc/CONTACTSLIST.csv")
read.csv2("/Volumes/C/Users/agilbert/Documents/GitHub/CabotCRM/doc/CONTACTSLIST.csv")
res <- read.csv2("/Volumes/C/Users/agilbert/Documents/GitHub/CabotCRM/doc/CONTACTSLIST.csv")
res <- read.csv("/Volumes/C/Users/agilbert/Documents/GitHub/CabotCRM/doc/CONTACTSLIST.csv")
res[HEALTHY_YOU]
res[$HEALTHY_YOU,]
res[,$HEALTHY_YOU]
res[,HEALTHY_YOU]
res[,3]
res[,4]
res[,res$HEALTHY_YOU]
res[,40]
res$names
names(res)
res[,46]
names(res)
res[,8]
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
nlme
help(xyplot)
BodyWeigth
BodyWeight
help(text)
help(abline)
help(panel)
help(panel.abline)
help(lines)
help(points)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
trellis.par.set()
help(trellis.par)
help(trellis.par.set)
library(ggplot)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(ggplot2)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month
)
help(geom)
help(ggplot2.geom)
??geom
g <- ggplot(movies, aes(votes, rating))
print(g)
print(g <- geom_scatterplot())
g + geom_dotplot
g + geom_point()
print(g)
g + geom_point()
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
help(stats_smooth)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
View(airquality)
View(airquality)
FARMER_USER_MARKETING_APR.01 <- read.csv("/Volumes/OneDrive/Cabot/CRM/FARMER_USER_MARKETING_APR-01.csv")
View(FARMER_USER_MARKETING_APR.01)
setwd("~/Working/Coursera/ReproducibleResearch/RepData_PeerAssessment1")
unzip("activity.zip")
read.table("activity.csv")
read.csv2("activity.csv")
activity.data <- read.csv("activity.csv")
help("read.csv")
